Polymorphism

Defination:
-----------
- The word "poly" means many and "morphs" means forms. So polymorphism means many forms.
- Polymorphism refers to many forms, or it is a process that performs a single action in different ways
- Polymorphism in Java is a concept by which we can perform a single action in different ways.

Two Types:
---------
Compile-time polymorphism
--------------------------
- Compile Time Polymorphism In Java is also known as Static Polymorphism. Furthermore, the call to the method is resolved at compile-time. 
- Compile-Time polymorphism is achieved through Method Overloading
- Operator Overloading is not supported by JAVA
- Method Overloading is when a class has multiple methods with the same name, but the number, types, and order of parameters and the return type of the methods are different

static int add(int a,int b){return a+b;}  
static int add(int a,int b,int c){return a+b+c;} 
static int add(int a,int b,int c, int d){return a+b+c+d;} 

Runtime polymorphism
--------------------
- Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time
- You can achieve Runtime polymorphism via Method Overriding.
- Method Overriding is done when a child or a subclass has a method with the same name, parameters, and return type as the parent or the superclass; then that function overrides the function in the superclass

class Animal{  
  void eat(){
    System.out.println("Animals Eat");
  }  
}  

class herbivores extends Animal{  
  void eat(){
     System.out.println("Herbivores Eat Plants");
  } 
}

class omnivores extends Animal{  
  void eat(){
     System.out.println("Omnivores Eat Plants and meat");
  } 
}

class carnivores extends Animal{  
  void eat(){
    System.out.println("Carnivores Eat meat");
  } 
}

class main{
  public static void main(String args[]){ 
    Animal A = new Animal();
    Animal h = new herbivores(); //upcasting  
	Animal o = new omnivores(); //upcasting  
    Animal c = new carnivores(); //upcasting  
    A.eat();
    h.eat();
    o.eat();  
    c.eat();  
  
  }  
}  