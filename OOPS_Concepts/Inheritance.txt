Inheritance

Defination:
-----------
- Inheritance is a method in which one object acquires/inherits another objectâ€™s properties, and inheritance also supports hierarchical classification.
- It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class
- The new class that is created is known as subclass (child or derived class) and the existing class from where the child class is derived is known as superclass (parent or base class).
- The extends keyword is used to perform inheritance in Java

Why Do We Need Java Inheritance
-------------------------------
- Code Reusability: The code written in the Superclass is common to all subclasses. Child classes can directly use the parent class code.
- Method Overriding: Method Overriding is achievable only through Inheritance. It is one of the ways by which Java achieves Run Time Polymorphism.
- Abstraction: The concept of abstract where we do not have to provide all details is achieved through inheritance. Abstraction only shows the functionality to the user.
					 
					 
Types of Inheritance: 
---------------------
Single:
multilevel
Herirachial   


- Multiple inheritance is not supported in Java through class.





Example:
--------
abstract class Animal {

    private String name;
 
    public Animal(String name) { this.name = name; }
 
    public abstract void makeSound();
 
    public String getName() { return name; }
}
 
// Abstracted class
class Dog extends Animal {
    public Dog(String name) { super(name); }
 
    public void makeSound()
    {
        System.out.println(getName() + " barks");
    }
}
 
// Abstracted class
class Cat extends Animal {
    public Cat(String name) { super(name); }
 
    public void makeSound()
    {
        System.out.println(getName() + " meows");
    }
}
					 
	