Data Abstraction --> 
	 
	Abstraction is a process which displays only the information needed and hides the unnecessary information. 

    Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details.
		
	We can say that the  main purpose of abstraction is data hiding
					    
	1) Interface or 2) abstract class
						
	Real-Life Example:
Consider a real-life example of a man driving a car. 
The man only knows that pressing the accelerators will increase the speed of a car or applying brakes will stop the car, 
but he does not know how on pressing the accelerator the speed is actually increasing, he does not know about the 
inner mechanism of the car or the implementation of the accelerator, brakes, etc in the car. This is what abstraction is. 

____________________________________________________________________________________________________________________________________

 Encapsulation --> it is the process that binds together the data and code into a single unit and keeps both from being safe from 
	                   outside interference and misuse. 
					   
					   In this process, the data is hidden from other classes and can be accessed only through the current class’s methods
					   
					   
	public class Car{
	
	private String carName;  //variables
	private String carModel;
	
	public void setCarName(String carName){   //method
	    this.carName = carName;
	}
	
	public void setCarModel(String carModel){
	    this.carModel = carModel;
	}
	
	public static void main(Sting args[]){ // main method
	   
	   Car car = new Car();   //object creation --> using new keyword
	   
	   car.setCarName("Creta");
	   car.setCarModel("Huyndai")
	
	}
	
	}
	
					   
____________________________________________________________________________________________________________________________________					   

Inheritance --> Inheritance is a method in which one object acquires/inherits another object’s properties, and inheritance also 
	                 supports hierarchical classification
					 
			--> keyword  (extends)
					 
Types of Inheritance: Single, multilevel, Herirachial   (multiple inheritance -- java won't support)
====================

abstract class Animal {

    private String name;
 
    public Animal(String name) { this.name = name; }
 
    public abstract void makeSound();
 
    public String getName() { return name; }
}
 
// Abstracted class
class Dog extends Animal {
    public Dog(String name) { super(name); }
 
    public void makeSound()
    {
        System.out.println(getName() + " barks");
    }
}
 
// Abstracted class
class Cat extends Animal {
    public Cat(String name) { super(name); }
 
    public void makeSound()
    {
        System.out.println(getName() + " meows");
    }
}
					 
					 
					 
____________________________________________________________________________________________________________________________________

Polymorphism --> Polymorphism refers to many forms, or it is a process that performs a single action in different ways

compile 

1) method overloading --> method name is same but paramater will be different

static int add(int a,int b){return a+b;}  
static int add(int a,int b,int c){return a+b+c;} 
static int add(int a,int b,int c, int d){return a+b+c+d;} 

run time

2) method overwriting --> method name and paramaters are same

class Bank{  
int getRateOfInterest(){return 0;}  
}  
//Creating child classes.  
class SBI extends Bank{  
int getRateOfInterest(){return 8;} --> same method and same paramaters 
}  
  
class ICICI extends Bank{  
int getRateOfInterest(){return 7;}  
}  


____________________________________________________________________________________________________________________________________





____________________________________________________________________________________________________________________________________
